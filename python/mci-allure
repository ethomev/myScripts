#!/usr/bin/python
import subprocess
import argparse
import sys
import datetime

'''
This is my convenience script for building test projects & executing the tests.
I'm lazy and don't like typing the same group of commands repeatedly so I
wrote this script.

TODO:
Run the 'allure report open' command in the background so the script exits.
    Create a completely separate process. subprocess there is a link to parent
    and parent won't finish until child finishes
Add optional catch all argument
    can it accept a string with spaces?
'''

# Setup the command line arguments
parser = argparse.ArgumentParser(
    description='Build the project, execute the tests & generate the allure '
                'report.')
parser.add_argument("-s", "--suites",
                    help="The suite(s) to execute, all suites will be "
                         "executed if this is left blank")
parser.add_argument("-p", "--taf_profiles",
                    help="The taf profile(s) to use at runtime.")
parser.add_argument("-c", "--taf_clusterId",
                    help="The taf cluster Id to use at runtime.")
parser.add_argument("-m", "--maven_profiles",
                    help="The maven profile(s) to use at runtime.")
parser.add_argument("--skip_tests",
                    help="Skip the execution of the tests & generation of "
                         "the allure report",
                    action="store_true")
parser.add_argument("--log_name",
                    help="Give the console output log file a specific name, defaults to console. No need to specify file extension")
parser.add_argument("-g", "--general", help="catch all argument which you can put any text in")
args = parser.parse_args()


# argument contents checking function
def check_argument_contents(condition, error_message):
    if condition:
        print error_message
        sys.exit()


# populate mvn argument list
mvn_args_list = ["mvn", "clean", "install"]
tee_args_list = ["tee"]
if args.suites:
    check_argument_contents(".xml" not in args.suites,
                            "suites argument did not end in .xml, was: " + str(
                                args.suites))
    suites = "-Dsuites=" + args.suites
    mvn_args_list.append(suites)
if args.taf_profiles:
    taf_profiles = "-Dtaf.profiles=" + args.taf_profiles
    mvn_args_list.append(taf_profiles)
if args.taf_clusterId:
    check_argument_contents(args.taf_clusterId.isdigit() is False,
                            "taf.clusterId argument is not a number, was: "
                            + str(args.taf_clusterId))
    taf_clusterId = "-Dtaf.clusterId=" + args.taf_clusterId
    mvn_args_list.append(taf_clusterId)
if args.skip_tests:
    mvn_args_list.append("-DskipTests")
if args.maven_profiles:
    mvn_args_list.append("-P" + str(args.maven_profiles))
if args.log_name:
    tee_args_list.append(args.log_name + ".log")
else:
    tee_args_list.append("console.log")
if args.general:
    mvn_args_list.append(args.general)

# execute mvn clean install with variables
mvn = subprocess.Popen(mvn_args_list, stdout=subprocess.PIPE)
subprocess.call(tee_args_list, stdin=mvn.stdout)
mvn.wait()
print "mvn exit code: " + str(mvn.returncode)
print "mvn args: " + str(mvn_args_list)
# if install was successful generate allure report
if mvn.returncode is 0 and args.skip_tests is False:
    print "=== Generating allure report ==="
    subprocess.call(["allure", "generate", "target/allure-results"])
    open_report = subprocess.call(["allure", "report", "open"])
else:
    print "=== Not generating allure report ==="
